	---
	Cube Project Home Page
	---
	Bassem Debbabi
	---
	09-Jul-2012
	---

  {{{./getting_started.html}Getting started}} >

Connecting components

  In this tutorial, we will show you how to specify constraints and goals on how the components should be connected.

  We will just manipulate Cube Abstract Components. All what is applied to these components can be projected to real technology-specific components (using {{{./extensions.html}Cube Extensions}}).

%{toc|section=1|fromDepth=2|toDepth=3}

* Where to find and test the examples

  From the {{{./download.html}downloaded}} distribution of Cube, in the following directory:

------
demo/getting_started/connecting_components
------

* The initial configuration

  In this tutorial, we will use only one Node (<<<mynode>>>). The Cube Agent controling this node is configured with two extensions: the core extension and the {{{./monitoring_extension.html}internal monitoring extension}}. The first one contains the core model types (components, nodes and scopes) and the core constraints and their resolvers, while the second one allows us to see, in graphical interface, the structure of the application's part (components).

  have a look to the agent config file located here:

----------
demo/getting_started/connecting_components/mynode/load/cube.agent
----------

+----------------+
<cube>
  <agent>
    <host value="localhost"/>
    <port value="38000"/>
    <archetypeUrl value="file:../demo1.arch"/>

    <extensions>
      <extension id="fr.liglab.adele.cube.core"/>
      <extension id="fr.liglab.adele.cube.monitoring"/>
    </extensions>
  </agent>
</cube>
+----------------+

  In this tutorial, we will change the <<<archetypeUrl>>> each time we want to test some thing different. This requires to restart the node. (It is already envisaged to have the {{{https://github.com/AdeleResearchGroup/cube/issues/3}dynamic upgrade of archetypes}}, but not yet implemented!)

* Test case 1

** The Archetype

  First, we will test the following {{{./archetype.html}archetype}} definition (<<<demo1.arch>>>):

+---------------------------+
<cube xmlns:core="fr.liglab.adele.cube.core">
  <archetype id="net.debbabi.cube.demo.connect" name="Connecting Components Tutorial" version="1.0">

    <types>
      <core:component id="A"/>
      <core:component id="B"/>
    </types>

    <constraints>
      <variables>
        <var id="va" type="A"/>
        <var id="vb" type="B"/>
      </variables>
      <core:connect v1="va" v2="vb"/>
    </constraints>

  </archetype>
</cube>
+---------------------------+

  We have specified two component types <<<A>>> and <<<B>>>. All the instances of component type <<<A>>> are constrained with the <<<connect>>> constraint with instances of component type <<<B>>>. That is, each instance A should be connected to another instance B (and <<not>> vice versa!). 

** Testing

  Launch the cube agent from:

---------
demo/getting_started/connecting_components/mynode
---------

  Within Linux shell, type the following command. ({{{https://github.com/AdeleResearchGroup/cube/issues/1}Other Operating systems}})

---------
  $ sh ./init.sh
      _______              
     /|      |             
    | | CUBE |...Starting the CUBE Platform  
    | |______|   1.2.0-SNAPSHOT
    |/______/              
  
  ____________________________
  Welcome to Apache Felix Gogo

  [INFO] ... starting the CubeAgent: cube://localhost:38000
  g! 
---------
  
  After the startup of the node, you will have the internal monitoring GUI opened.
 
  Create a component instance of type A (using <<<newi>>> command), and then show the Runtime Model content (using <<<rm>>> command).

----------
 g! newi A
 g! rm
 --------------------------------------------------------------------------
 - cube://localhost:38000/objects/0 (fr.liglab.adele.cube.core.component:A) [UNRESOLVED]
	localId: 0
	Node: null
	InComps:
	OutComps:
 --------------------------------------------------------------------------
----------

  You notice that A is <<<unresolved>>> due to the non respect of the <<<connect>>> constraint. That is, A instance is created but when resolving it, it is not connected to any instance B.

  Create a new instance B.

----------
 g! newi B
 g! rm
 --------------------------------------------------------------------------
 - cube://localhost:38000/objects/1 (fr.liglab.adele.cube.core.component:B) [VALID]
	localId: 1
	Node: null
	InComps:
	OutComps:

- cube://localhost:38000/objects/0 (fr.liglab.adele.cube.core.component:A) [UNRESOLVED]
	localId: 0
	Node: null
	InComps:
	OutComps:
 --------------------------------------------------------------------------
----------

  The component instance B is created and is valid. This is true because no constraint was specified on B instances. 

  You notice that A is always <<<unresolved>>> despite the availability of the B instance (see the description of this {{{}issue on the Cube project}}).

  Now, if you create a new instance of type A, it will always remains <<<unresolved>>>, this is because we have not mentionned in the archetype how to find this instance of type B which A is connected to. This should be specified manually on the archetype, but in future versions {{{https://github.com/AdeleResearchGroup/cube/issues/7}we envisage to do that automatically}}.


* Test case 2

** The Archetype

  We update the first archetype by adding constraints allowing as to find the instance of type B connected to the instance of type A when created (<<<demo2.arch>>>):

+---------------------------+
<cube xmlns:core="fr.liglab.adele.cube.core">
  <archetype id="net.debbabi.cube.demo.connect" name="Connecting Components Tutorial" version="1.0">

    <types>
      <core:component id="A"/>
      <core:component id="B"/>
    </types>

    <constraints>
      <variables>
        <var id="va" type="A"/>
        <var id="vb" type="B"/>
      </variables>
      <core:connect v1="va" v2="vb"/>
      <core:find-locally v="vb" priority="1"/>
      <core:self-create-locally v="vb" priority="2"/>
    </constraints>

  </archetype>
</cube>
+---------------------------+

	The <<<find-locally>>> ...
  
	You notice that we have manullay put priorities between the two constraints <<<find-locally>>> and <<<self-create-locally>>>. 

** Testing


* Test case 3

** The Archetype

  Now, We update the last archetype definition by adding constraint on the B instances. This constraints (<<<in-components>>>) will ensure that any instance of component B should have at max a given number of input component instances. (see <<<demo3.arch>>>):

+---------------------------+
<cube xmlns:core="fr.liglab.adele.cube.core">
  <archetype id="net.debbabi.cube.demo.connect" name="Connecting Components Tutorial" version="1.0">

    <types>
      <core:component id="A"/>
      <core:component id="B"/>
    </types>

    <constraints>
      <variables>
        <var id="va" type="A"/>
        <var id="vb" type="B"/>
      </variables>
      <core:connect v1="va" v2="vb"/>
      <core:find-locally v="vb" priority="1"/>
      <core:self-create-locally v="vb" priority="2"/>
      <core:in-components v="vb" max="2"/>
    </constraints>

  </archetype>
</cube>
+---------------------------+


  []


  {{{./getting_started.html}Getting started}} >

